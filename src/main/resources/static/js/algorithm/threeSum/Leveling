
const threeSum = function(nums) {

    1. 결과를 return 해줄 배열을 선언합니다. (results)
    2. nums 의 길이가 3 보다 작으면 return 합니다. (nums 에는 최소 3개의 인자가 있어야 하기 때문이입니다.)
    3. nums 를 오름차순으로 정렬합니다. (nums 는 배열이므로 sort Api 를 사용합니다.)
    4. integer 0을 담은 변수(target)를 선언합니다. (이는 세 수의 함이 0 임을 확인하기 위함입니. 그냥 숫자 0을 써도 되지만 타입을 명확히 하기 위해서 입니다.)

    5. 변수 i 가 0부터 nums 의 길이 -2  만큼 증가하며 반복합니다. (길이-2인 이유는 숫자 3개를 비교하기 때문입니다.)
        5-1. num[i] 가 target 보다 크면 반복문을 빠져 나갑니다.
        5-2. 변수 j 를 i+1 로 선언합니다. (맨 앞)
        5-3. 변수 k 를 nums 의 길이 -1 로 선언합니다. (맨 뒤)
        5-4. k 가 j 보다 커질 때 까지 반복합니다.
            5-4-1. nums 배열의 i,j,k 번째 수의 합을 변수 sum 에 초기화합니다.
            5-4-2. sum 과 target 의 값이 값다면
                5-4-2-1. results 에 nums 배열의 i,j,k 번째 수를 담는다. (push)
                5-4-2-2. nums 의 j 번째 수와 j+1 번째 수가 같을 때까지 j를 1씩 증가시킨다. (이는 중복값을 건너뛰기 위해서 이다.)
                5-4-2-3. nums 의 k 번째 수와 k-1 번째 수가 같을 때까지 k를 1씩 감소시킨다. (이는 중복값을 건너뛰기 위해서 이다.)
                5-4-2-4. j를 1씩 증가시킨다.
                5-4-2-5. k를 1씩 감소시킨다.
            5-4-3. sum 과 target 의 값이 값은데 sum 이 target 보다 작을 때
                5-4-3-1. j를 1씩 증가시킨다.
            5-4-4. sum 과 target 의 값이 값은데 sum 이 target 보다 클 때
                5-4-4-1. k를 1씩 감소시킨다.

    6. results 를 반환한다.
};

하아 이거 생각한다고 3일은 쓴거 같아여...
우선 처음에는 그냥 for 문 두개로 돌렸는데 그건 너무 일차원적인거 같아서 다른 방법으로 생각한다고 오래 걸렸던거 같습니다.